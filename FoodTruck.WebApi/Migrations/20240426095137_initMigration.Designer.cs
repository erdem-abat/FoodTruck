// <auto-generated />
using System;
using FoodTruck.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodTruck.WebApi.Migrations
{
    [DbContext(typeof(FoodTruckContext))]
    [Migration("20240426095137_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:CharSetDelegation", DelegationModes.ApplyToDatabases)
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodTruck.Domain.Entities.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartDetailId"));

                    b.Property<int>("CartHeaderId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartHeaderId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.CartHeader", b =>
                {
                    b.Property<int>("CartHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartHeaderId"));

                    b.Property<string>("CouponCode")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CartHeaderId");

                    b.ToTable("CartHeaders");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Chef", b =>
                {
                    b.Property<int>("ChefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChefId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("TruckId")
                        .HasColumnType("integer");

                    b.HasKey("ChefId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TruckId");

                    b.ToTable("Chefs");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CouponId"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("minAmount")
                        .HasColumnType("integer");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageLocalPath")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodChef", b =>
                {
                    b.Property<int>("FoodChefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodChefId"));

                    b.Property<int>("ChefId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.HasKey("FoodChefId");

                    b.HasIndex("ChefId");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodChefs");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodMood", b =>
                {
                    b.Property<int>("FoodMoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodMoodId"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("MoodId")
                        .HasColumnType("integer");

                    b.HasKey("FoodMoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MoodId");

                    b.ToTable("FoodMood");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodRestaurant", b =>
                {
                    b.Property<int>("FoodRestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodRestaurantId"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("FoodRestaurantId");

                    b.HasIndex("FoodId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FoodRestaurant");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTaste", b =>
                {
                    b.Property<int>("FoodTasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodTasteId"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("TasteId")
                        .HasColumnType("integer");

                    b.HasKey("FoodTasteId");

                    b.HasIndex("FoodId");

                    b.HasIndex("TasteId");

                    b.ToTable("FoodTaste");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTruck", b =>
                {
                    b.Property<int>("FoodTruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodTruckId"));

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("TruckId")
                        .HasColumnType("integer");

                    b.HasKey("FoodTruckId");

                    b.HasIndex("FoodId");

                    b.HasIndex("TruckId");

                    b.ToTable("FoodTrucks");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTruckCartDetail", b =>
                {
                    b.Property<int>("FoodTruckCartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodTruckCartDetailId"));

                    b.Property<int>("CartHeaderId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("TruckId")
                        .HasColumnType("integer");

                    b.HasKey("FoodTruckCartDetailId");

                    b.HasIndex("CartHeaderId");

                    b.ToTable("FoodTruckCartDetails");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MoodId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MoodId");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CouponCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("CloseTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAlcohol")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("OpenTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RestaurantId");

                    b.HasIndex("LocationId");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.RestaurantDetail", b =>
                {
                    b.Property<int>("RestaurantDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantDetailId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantDetailId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantDetails");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeatId"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.HasKey("SeatId");

                    b.HasIndex("TableId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableId"));

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("boolean");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.HasKey("TableId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Taste", b =>
                {
                    b.Property<int>("TasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TasteId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TasteId");

                    b.ToTable("Tastes");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TruckId"));

                    b.Property<string>("TruckName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TruckId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.TruckReservation", b =>
                {
                    b.Property<int>("TruckReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TruckReservationId"));

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("TruckId")
                        .HasColumnType("integer");

                    b.HasKey("TruckReservationId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckReservations");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.CartDetail", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.CartHeader", "CartHeader")
                        .WithMany()
                        .HasForeignKey("CartHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartHeader");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Chef", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Chefs")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Truck", "Truck")
                        .WithMany("Chefs")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Country", "Country")
                        .WithMany("Foods")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodChef", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Chef", "Chef")
                        .WithMany("GoodAt")
                        .HasForeignKey("ChefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("Chefs")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodMood", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("FoodMoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Mood", "Mood")
                        .WithMany("Foods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodRestaurant", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("FoodRestaurants")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("FoodRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTaste", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("FoodTastes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Taste", "Taste")
                        .WithMany("Foods")
                        .HasForeignKey("TasteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Taste");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTruck", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("Trucks")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Truck", "Truck")
                        .WithMany("Foods")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTruckCartDetail", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.CartHeader", "CartHeader")
                        .WithMany()
                        .HasForeignKey("CartHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartHeader");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Order", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Restaurant", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Location", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.RestaurantDetail", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantDetails")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Seat", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Table", "Table")
                        .WithMany("Seats")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Table", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.TruckReservation", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Location", "FromLocation")
                        .WithMany("FromReservation")
                        .HasForeignKey("FromLocationId");

                    b.HasOne("FoodTruck.Domain.Entities.Location", "ToLocation")
                        .WithMany("ToReservation")
                        .HasForeignKey("ToLocationId");

                    b.HasOne("FoodTruck.Domain.Entities.Truck", "Truck")
                        .WithMany("TruckReservations")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Chef", b =>
                {
                    b.Navigation("GoodAt");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Country", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.Navigation("Chefs");

                    b.Navigation("FoodMoods");

                    b.Navigation("FoodRestaurants");

                    b.Navigation("FoodTastes");

                    b.Navigation("OrderDetails");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Location", b =>
                {
                    b.Navigation("FromReservation");

                    b.Navigation("Restaurants");

                    b.Navigation("ToReservation");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Mood", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Chefs");

                    b.Navigation("FoodRestaurants");

                    b.Navigation("RestaurantDetails");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Table", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Taste", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Truck", b =>
                {
                    b.Navigation("Chefs");

                    b.Navigation("Foods");

                    b.Navigation("TruckReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
