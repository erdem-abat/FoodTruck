// <auto-generated />
using System;
using FoodTruck.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodTruck.WebApi.Migrations
{
    [DbContext(typeof(FoodTruckContext))]
    [Migration("20240224201920_CreatedDbMigration")]
    partial class CreatedDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, null, DelegationModes.ApplyToDatabases);

            modelBuilder.Entity("FoodTruck.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageLocalPath")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<int?>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int?>("TasteId")
                        .HasColumnType("int");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MoodId");

                    b.HasIndex("TasteId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodMood", b =>
                {
                    b.Property<int>("FoodMoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.HasKey("FoodMoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MoodId");

                    b.ToTable("FoodMood");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTaste", b =>
                {
                    b.Property<int>("FoodTasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("TasteId")
                        .HasColumnType("int");

                    b.HasKey("FoodTasteId");

                    b.HasIndex("FoodId");

                    b.HasIndex("TasteId");

                    b.ToTable("FoodTaste");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MoodId");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Taste", b =>
                {
                    b.Property<int>("TasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TasteId");

                    b.ToTable("Tastes");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Country", "Country")
                        .WithMany("Foods")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Mood", null)
                        .WithMany("Foods")
                        .HasForeignKey("MoodId");

                    b.HasOne("FoodTruck.Domain.Entities.Taste", null)
                        .WithMany("Foods")
                        .HasForeignKey("TasteId");

                    b.Navigation("Category");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodMood", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("Moods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Mood", "Mood")
                        .WithMany()
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.FoodTaste", b =>
                {
                    b.HasOne("FoodTruck.Domain.Entities.Food", "Food")
                        .WithMany("FoodTastes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTruck.Domain.Entities.Taste", "Taste")
                        .WithMany()
                        .HasForeignKey("TasteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Taste");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Country", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Food", b =>
                {
                    b.Navigation("FoodTastes");

                    b.Navigation("Moods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Mood", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("FoodTruck.Domain.Entities.Taste", b =>
                {
                    b.Navigation("Foods");
                });
#pragma warning restore 612, 618
        }
    }
}
